// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

import * as List               from "bs-platform/lib/es6/list.js";
import * as $$Array            from "bs-platform/lib/es6/array.js";
import * as Curry              from "bs-platform/lib/es6/curry.js";
import * as React              from "react";
import * as ReasonReact        from "reason-react/src/ReasonReact.js";
import * as Js_primitive       from "bs-platform/lib/es6/js_primitive.js";
import * as FileItem$EasyDrive from "./FileItem.bs.js";

(( require('./FolderView.css') ));

var component = ReasonReact.statelessComponent("FolderView");

function make(files, current_file, on_click_file, _) {
  var file_to_list_item = function (file) {
    var selected = current_file ? +(current_file[0][/* id */0] === file[/* id */0]) : /* false */0;
    return React.createElement("div", {
                key: file[/* id */0],
                onClick: Curry._1(on_click_file, file)
              }, React.createElement("li", undefined, ReasonReact.element(/* None */0, /* None */0, FileItem$EasyDrive.make(file[/* name */1], selected, file[/* icon_link */3], /* array */[]))));
  };
  var foldersFirst = function (a, b) {
    var folder = "application/vnd.google-apps.folder";
    var a_is_folder = +(a[/* mimeType */4] === folder && a[/* mimeType */4] !== b[/* mimeType */4]);
    var b_is_folder = +(b[/* mimeType */4] === folder && a[/* mimeType */4] !== b[/* mimeType */4]);
    if (a_is_folder) {
      return -1;
    } else if (b_is_folder) {
      return 1;
    } else {
      var cmp = b[/* name */1].localeCompare(a[/* name */1]);
      var match = +(cmp > 0.0);
      if (match !== 0) {
        return 1;
      } else {
        var match$1 = +(cmp < 0.0);
        if (match$1 !== 0) {
          return -1;
        } else {
          return 0;
        }
      }
    }
  };
  var newrecord = component.slice();
  newrecord[/* render */9] = (function () {
      if (files) {
        return React.createElement("ul", {
                    className: "m0 px2"
                  }, $$Array.of_list(List.map(file_to_list_item, List.sort(foldersFirst, files[0]))));
      } else {
        return React.createElement("p", undefined, "Loading files...");
      }
    });
  return newrecord;
}

var $$default = ReasonReact.wrapReasonForJs(component, (function (jsProps) {
        return make(jsProps.files, Js_primitive.null_undefined_to_opt(jsProps.currentFile), jsProps.onClickFile, /* array */[]);
      }));

export {
  component ,
  make      ,
  $$default ,
  $$default   as default,
  
}
/*  Not a pure module */
